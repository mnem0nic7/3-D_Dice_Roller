import React from 'react';
import { DiceType } from '../../../shared/src/types';

interface DiceSelectorProps {
  selectedDice: DiceType[];
  onDiceChange: (dice: DiceType[]) => void;
  isRolling: boolean;
}

const DICE_TYPES: { type: DiceType; name: string; emoji: string }[] = [
  { type: 'd4', name: 'D4', emoji: 'üî∫' },
  { type: 'd6', name: 'D6', emoji: 'üé≤' },
  { type: 'd8', name: 'D8', emoji: 'üî∏' },
  { type: 'd10', name: 'D10', emoji: 'üîü' },
  { type: 'd12', name: 'D12', emoji: 'üåü' },
  { type: 'd20', name: 'D20', emoji: '‚≠ê' },
  { type: 'd100', name: 'D100', emoji: 'üíØ' },
];

export const DiceSelector: React.FC<DiceSelectorProps> = ({
  selectedDice,
  onDiceChange,
  isRolling
}) => {
  const addDie = (type: DiceType) => {
    if (!isRolling) {
      onDiceChange([...selectedDice, type]);
    }
  };

  const removeDie = (index: number) => {
    if (!isRolling) {
      const newDice = selectedDice.filter((_, i) => i !== index);
      onDiceChange(newDice);
    }
  };

  const clearAll = () => {
    if (!isRolling) {
      onDiceChange([]);
    }
  };

  const getDiceCount = (type: DiceType) => {
    return selectedDice.filter(d => d === type).length;
  };

  return (
    <div className="dice-selector">
      <h4>Select Dice:</h4>
      
      <div className="dice-types">
        {DICE_TYPES.map(({ type, name, emoji }) => (
          <button
            key={type}
            onClick={() => addDie(type)}
            disabled={isRolling}
            className="dice-type-button"
          >
            <span>{emoji}</span>
            <span>{name}</span>
            {getDiceCount(type) > 0 && (
              <span className="dice-count">
                {getDiceCount(type)}
              </span>
            )}
          </button>
        ))}
      </div>

      {selectedDice.length > 0 && (
        <div className="selected-dice">
          <h4>Selected Dice ({selectedDice.length}):</h4>
          <div className="dice-list">
            {selectedDice.map((type, index) => (
              <div key={index} className="dice-item">
                <span>{DICE_TYPES.find(d => d.type === type)?.emoji} {type.toUpperCase()}</span>
                <button
                  onClick={() => removeDie(index)}
                  disabled={isRolling}
                  className="remove-dice"
                >
                  √ó
                </button>
              </div>
            ))}
          </div>
          
          <button
            onClick={clearAll}
            disabled={isRolling || selectedDice.length === 0}
            className="clear-all-button"
          >
            Clear All
          </button>
        </div>
      )}
    </div>
  );
};
